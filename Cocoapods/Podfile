platform :ios, '5.0'

pod 'SparkFramework', '~> 0.0.1'

pre_install do |installer|

  user_project_name = File.basename(Dir.getwd)

  # paths
  path_proj_user = (Dir.glob Dir.getwd).last
  path_user_project = path_proj_user + "/#{user_project_name}.xcodeproj"

  path_proj_pods = path_proj_user + '/Pods'

  # user's directories/files
  genereted_attribute_user = "#{path_proj_user}/#{user_project_name}/SparkGeneratedAttributes/SparkGeneratedAttribute.m"
  
  if !File.exists?(genereted_attribute_user)

    FileUtils.mkdir_p(user_project_name + '/SparkGeneratedAttributes')
    puts "create: #{genereted_attribute_user}"
    File.new(genereted_attribute_user, "w+").close
  end

  # pod's directories/files
  genereted_attribute_pods = "#{path_proj_pods}/SparkFramework/Framework/SparkGeneratedAttributes/SparkGeneratedAttribute.m"

  if !File.exists?(genereted_attribute_pods)

    FileUtils.mkdir("#{path_proj_pods}/SparkFramework/Framework/SparkGeneratedAttributes")
    puts "create: #{genereted_attribute_pods}"
    File.new(genereted_attribute_pods, "w+").close
  end

end

post_install do |installer|

  user_project_name = File.basename(Dir.getwd)

  # paths
  path_proj_user = (Dir.glob Dir.getwd).last
  path_user_project = path_proj_user + "/#{user_project_name}.xcodeproj"

  path_proj_pods = path_proj_user + '/Pods'

  # run scripts
  run_script_user = "#{path_proj_user}/binaries/SparkAttributesCodeGenerator"\
                    " -src=#{path_proj_user}/#{user_project_name}"\
                    " -dst=#{path_proj_user}/#{user_project_name}/SparkGeneratedAttributes/"
  run_script_pods = "#{path_proj_user}/binaries/SparkAttributesCodeGenerator"\
                    " -src=#{path_proj_pods}/"\
                    " -dst=#{path_proj_pods}/SparkFramework/Framework/SparkGeneratedAttributes/"

  puts "user's project: #{path_user_project}"

  if File.exists?(path_user_project)
    puts "Info: found user's project by path: #{path_user_project}"
  else
    puts "Error: not found user's project (Podfile should be located in your project directory)"
    Process.exit!(true)
  end

  # user's project
  proj = Xcodeproj::Project.open(path_user_project)

  proj.targets.each do |target|

    # adjust run script
    phase = target.new_shell_script_build_phase()
    phase.shell_script = run_script_user

  end

  proj.save(proj.path)

  # adjust pods project
  installer.project.targets.each do |target|

    # adjust run script
    phase = target.new_shell_script_build_phase()
    phase.shell_script = run_script_pods
    
  end

  # create directories 9shared sources
  path_binary = Dir.getwd + '/binaries'
  if !File.directory?(path_binary)

    FileUtils.mkdir(path_binary)
  end

end
